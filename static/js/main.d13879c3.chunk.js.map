{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PopupInner","styled","div","Time","App","date","Date","console","log","getHours","getMinutes","delta","Math","abs","getFullYear","getMonth","getDate","getSeconds","now","state","time","breakRemainingSeconds","timer","startTimer","bind","countDown","secs","divisor_for_hours","divisor_for_minutes","divisor_for_seconds","d","floor","h","m","s","ceil","timeLeft","this","createTime","setState","setInterval","seconds","clearInterval","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o1BAGA,IAAMA,EAAaC,IAAOC,IAAV,KAeVC,EAAOF,IAAOC,IAAV,KAiHKE,E,YApGb,aAAe,IAAD,sBACZ,8CAEA,IAAIC,EAAO,IAAIC,KAEfC,QAAQC,IAAIH,EAAKI,WAAa,IAAMJ,EAAKK,cAEzC,IAAIC,EACFC,KAAKC,IACH,IAAIP,KACFD,EAAKS,cACLT,EAAKU,WAAa,EAClBV,EAAKW,UACLX,EAAKI,WACLJ,EAAKK,aACLL,EAAKY,aACL,GACE,IAAIX,KAAK,KAAM,EAAG,GAAI,GAAI,GAAI,EAAG,IACnC,IAlBM,OAoBZC,QAAQC,IAAI,UAAYG,EAAQ,IAAML,KAAKY,OAE3C,EAAKC,MAAQ,CACXC,KAAM,GACNC,sBAAuBV,GAGzB,EAAKW,MAAQ,EACb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAEjB,EAAKD,aA/BO,E,wEAsCHG,GACT,IACIC,EAAoBD,EAAI,MAExBE,EAAsBF,EAAI,KAE1BG,EAAsBD,EAAsB,GAShD,MANiB,CACfE,EATSlB,KAAKmB,MAAML,EAAI,OAUxBM,EARUpB,KAAKmB,MAAMJ,EAAiB,MAStCM,EAPYrB,KAAKmB,MAAMH,EAAsB,IAQ7CM,EANYtB,KAAKuB,KAAKN,M,0CAcxB,IAAIO,EAAWC,KAAKC,WAAWD,KAAKlB,MAAME,uBAC1CgB,KAAKE,SAAS,CAAEnB,KAAMgB,M,mCAKJ,GAAdC,KAAKf,QACPe,KAAKf,MAAQkB,YAAYH,KAAKZ,UAAW,Q,kCAM3C,IAAIgB,EAAUJ,KAAKlB,MAAME,sBAAwB,EACjDgB,KAAKE,SAAS,CACZnB,KAAMiB,KAAKC,WAAWG,GACtBpB,sBAAuBoB,IAIV,GAAXA,GACFC,cAAcL,KAAKf,S,+BAKrB,OACE,6BACE,kBAACtB,EAAD,KAIE,kBAACG,EAAD,cACSkC,KAAKlB,MAAMC,KAAKU,EADzB,UACmCO,KAAKlB,MAAMC,KAAKY,EADnD,WAC8D,IAC3DK,KAAKlB,MAAMC,KAAKa,EAFnB,aAEgCI,KAAKlB,MAAMC,KAAKc,S,GA9FxCS,IAAMC,WClBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.d13879c3.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PopupInner = styled.div`\n  position: absolute;\n  display: grid;\n  grid-template-columns: 1fr 1fr auto 1fr 1fr;\n  grid-template-rows: 1fr 1fr auto 1fr 1fr;\n  left: 1%;\n  right: 1%;\n  top: 1%;\n  bottom: 1%;\n  margin: auto;\n  border-radius: 20px;\n  border: 1px solid green;\n  background: black;\n`;\n\nconst Time = styled.div`\n  grid-column: 3/4;\n  grid-row: 3/4;\n\n  display: block;\n  padding: 5px 0px;\n  margin: 4px;\n  text-align: center;\n  font-size: 40px;\n  color: gold;\n`;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    let date = new Date();\n\n    console.log(date.getHours() + \" \" + date.getMinutes());\n\n    var delta =\n      Math.abs(\n        new Date(\n          date.getFullYear(),\n          date.getMonth() + 1,\n          date.getDate(),\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          0\n        ) - new Date(2020, 2, 29, 21, 40, 0, 0)\n      ) / 1000;\n\n    console.log(\"delta: \" + delta + \" \" + Date.now());\n\n    this.state = {\n      time: {},\n      breakRemainingSeconds: delta\n    };\n\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n\n    this.startTimer();\n  }\n\n  // Let's make some sense of JS date and time It can get a little bit tricky sometimes.\n  // So, what we're doing here is taking the values and converting it in hours minutes, seconds.\n  // In the example below we are using minutes and seconds, but just in case we got hours in there too :)\n\n  createTime(secs) {\n    let days = Math.floor(secs / (60 * 60 * 24));\n    let divisor_for_hours = secs % (60 * 60 * 24);\n    let hours = Math.floor(divisor_for_hours / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let timeObject = {\n      d: days,\n      h: hours,\n      m: minutes,\n      s: seconds\n    };\n    return timeObject;\n  }\n\n  componentDidMount() {\n    // Taking the starting point  -> breakRemainingSeconds <-\n    // Passing it as the parameter and setting the state's time object to it.\n    let timeLeft = this.createTime(this.state.breakRemainingSeconds);\n    this.setState({ time: timeLeft });\n  }\n\n  // Check the current state and potentially (if != 0) start our main function\n  startTimer() {\n    if (this.timer == 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.breakRemainingSeconds + 1;\n    this.setState({\n      time: this.createTime(seconds),\n      breakRemainingSeconds: seconds\n    });\n\n    // Check if we're at zero, and if so, clear the Interval\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <PopupInner>\n          {/*<button onClick={this.startTimer} style={{ marginRight: \"12px\" }}>\n          Let's Go\n    </button>*/}\n          <Time>\n            Dana: {this.state.time.d} Sati: {this.state.time.h} Minuta:{\" \"}\n            {this.state.time.m} Sekundi: {this.state.time.s}\n          </Time>\n        </PopupInner>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}