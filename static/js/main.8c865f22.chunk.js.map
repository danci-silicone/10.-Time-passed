{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PopupInner","styled","div","Time","Days","Hours","App","date","Date","console","log","getHours","getMinutes","delta","Math","abs","getFullYear","getMonth","getDate","getSeconds","now","state","time","breakRemainingSeconds","timer","startTimer","bind","countDown","secs","divisor_for_hours","divisor_for_minutes","divisor_for_seconds","d","floor","h","m","s","ceil","timeLeft","this","createTime","setState","setInterval","seconds","clearInterval","align","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yvCAGA,IAAMA,EAAaC,IAAOC,IAAV,KAeVC,EAAOF,IAAOC,IAAV,KAYJE,EAAOH,IAAOC,IAAV,KAIJG,EAAQJ,IAAOC,IAAV,KA2III,GApICL,IAAOC,IAAV,KAIGD,IAAOC,IAAV,K,YAKX,aAAe,IAAD,sBACZ,8CAEA,IAAIK,EAAO,IAAIC,KAEfC,QAAQC,IAAIH,EAAKI,WAAa,IAAMJ,EAAKK,cAEzC,IAAIC,EACFC,KAAKC,IACH,IAAIP,KACFD,EAAKS,cACLT,EAAKU,WAAa,EAClBV,EAAKW,UACLX,EAAKI,WACLJ,EAAKK,aACLL,EAAKY,aACL,GACE,IAAIX,KAAK,KAAM,EAAG,EAAG,GAAI,GAAI,EAAG,IAClC,IAlBM,OAoBZC,QAAQC,IAAI,UAAYG,EAAQ,IAAML,KAAKY,OAE3C,EAAKC,MAAQ,CACXC,KAAM,GACNC,sBAAuBV,GAGzB,EAAKW,MAAQ,EACb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAEjB,EAAKD,aA/BO,E,wEAsCHG,GACT,IACIC,EAAoBD,EAAI,MAExBE,EAAsBF,EAAI,KAE1BG,EAAsBD,EAAsB,GAShD,MANiB,CACfE,EATSlB,KAAKmB,MAAML,EAAI,OAUxBM,EARUpB,KAAKmB,MAAMJ,EAAiB,MAStCM,EAPYrB,KAAKmB,MAAMH,EAAsB,IAQ7CM,EANYtB,KAAKuB,KAAKN,M,0CAcxB,IAAIO,EAAWC,KAAKC,WAAWD,KAAKlB,MAAME,uBAC1CgB,KAAKE,SAAS,CAAEnB,KAAMgB,M,mCAKJ,GAAdC,KAAKf,QACPe,KAAKf,MAAQkB,YAAYH,KAAKZ,UAAW,Q,kCAM3C,IAAIgB,EAAUJ,KAAKlB,MAAME,sBAAwB,EACjDgB,KAAKE,SAAS,CACZnB,KAAMiB,KAAKC,WAAWG,GACtBpB,sBAAuBoB,IAIV,GAAXA,GACFC,cAAcL,KAAKf,S,+BAKrB,OACE,6BACE,kBAACxB,EAAD,KAIE,kBAACK,EAAD,KACE,yBAAKwC,MAAM,UAAX,kBACA,yBAAKA,MAAM,UAAX,eACA,yBAAKA,MAAM,UAAX,UAEF,kBAAC1C,EAAD,KACE,kBAACC,EAAD,KACE,+BACE,4BACE,wBAAIyC,MAAM,QAAV,SACA,4BAAKN,KAAKlB,MAAMC,KAAKU,IAEvB,4BACE,wBAAIa,MAAM,QAAV,SACA,4BAAKN,KAAKlB,MAAMC,KAAKY,IAEvB,4BACE,wBAAIW,MAAM,QAAV,WACA,4BAAKN,KAAKlB,MAAMC,KAAKa,IAEvB,4BACE,wBAAIU,MAAM,QAAV,YACA,4BAAKN,KAAKlB,MAAMC,KAAKc,a,GAlHrBU,IAAMC,YCrCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.8c865f22.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PopupInner = styled.div`\r\n  position: absolute;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr auto 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 1fr auto 1fr 1fr 1fr;\r\n  left: 1%;\r\n  right: 1%;\r\n  top: 1%;\r\n  bottom: 1%;\r\n  margin: auto;\r\n  border-radius: 20px;\r\n  border: 1px solid green;\r\n  background: black;\r\n`;\r\n\r\nconst Time = styled.div`\r\n  grid-column: 3/4;\r\n  grid-row: 4/5;\r\n\r\n  display: block;\r\n  padding: 5px 0px;\r\n  margin: 4px;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  color: gold;\r\n`;\r\n\r\nconst Days = styled.div`\r\n  grid-row: 2/3;\r\n`;\r\n\r\nconst Hours = styled.div`\r\n  grid-column: 3/4;\r\n  grid-row: 2/3;\r\n  font-size: 40px;\r\n  color: gold;\r\n`;\r\n\r\nconst Minutes = styled.div`\r\n  grid-row: 5/6;\r\n`;\r\n\r\nconst Seconds = styled.div`\r\n  grid-row: 7/8;\r\n`;\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    let date = new Date();\r\n\r\n    console.log(date.getHours() + \" \" + date.getMinutes());\r\n\r\n    var delta =\r\n      Math.abs(\r\n        new Date(\r\n          date.getFullYear(),\r\n          date.getMonth() + 1,\r\n          date.getDate(),\r\n          date.getHours(),\r\n          date.getMinutes(),\r\n          date.getSeconds(),\r\n          0\r\n        ) - new Date(2020, 3, 1, 15, 31, 0, 0)\r\n      ) / 1000;\r\n\r\n    console.log(\"delta: \" + delta + \" \" + Date.now());\r\n\r\n    this.state = {\r\n      time: {},\r\n      breakRemainingSeconds: delta\r\n    };\r\n\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n\r\n    this.startTimer();\r\n  }\r\n\r\n  // Let's make some sense of JS date and time It can get a little bit tricky sometimes.\r\n  // So, what we're doing here is taking the values and converting it in hours minutes, seconds.\r\n  // In the example below we are using minutes and seconds, but just in case we got hours in there too :)\r\n\r\n  createTime(secs) {\r\n    let days = Math.floor(secs / (60 * 60 * 24));\r\n    let divisor_for_hours = secs % (60 * 60 * 24);\r\n    let hours = Math.floor(divisor_for_hours / (60 * 60));\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let timeObject = {\r\n      d: days,\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds\r\n    };\r\n    return timeObject;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Taking the starting point  -> breakRemainingSeconds <-\r\n    // Passing it as the parameter and setting the state's time object to it.\r\n    let timeLeft = this.createTime(this.state.breakRemainingSeconds);\r\n    this.setState({ time: timeLeft });\r\n  }\r\n\r\n  // Check the current state and potentially (if != 0) start our main function\r\n  startTimer() {\r\n    if (this.timer == 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    // Remove one second, set state so a re-render happens.\r\n    let seconds = this.state.breakRemainingSeconds + 1;\r\n    this.setState({\r\n      time: this.createTime(seconds),\r\n      breakRemainingSeconds: seconds\r\n    });\r\n\r\n    // Check if we're at zero, and if so, clear the Interval\r\n    if (seconds == 0) {\r\n      clearInterval(this.timer);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PopupInner>\r\n          {/*<button onClick={this.startTimer} style={{ marginRight: \"12px\" }}>\r\n          Let's Go\r\n    </button>*/}\r\n          <Hours>\r\n            <div align=\"center\">Od prestanka: </div>\r\n            <div align=\"center\">01.03.2020.</div>\r\n            <div align=\"center\">15:31</div>\r\n          </Hours>\r\n          <Time>\r\n            <Days>\r\n              <table>\r\n                <tr>\r\n                  <th align=\"left\">Dana:</th>\r\n                  <td>{this.state.time.d}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th align=\"left\">Sati:</th>\r\n                  <td>{this.state.time.h}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th align=\"left\">Minuta:</th>\r\n                  <td>{this.state.time.m}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th align=\"left\">Sekundi:</th>\r\n                  <td>{this.state.time.s}</td>\r\n                </tr>\r\n              </table>\r\n            </Days>\r\n          </Time>\r\n        </PopupInner>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}